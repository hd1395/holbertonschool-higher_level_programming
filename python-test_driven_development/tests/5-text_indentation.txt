The `5-text_indentation` module
===============================

Using `text_indentation`
------------------------

Importing the function from the module:

    >>> text_indentation = __import__('5-text_indentation').text_indentation

Printing a large paragraph with punctuation:

    >>> text_indentation("""Is this what you wanted? Perhaps: a collection of words. Here, there, everywhere? Let’s explore: ideas, thoughts, wonders. Can we go deeper? Maybe! Or should we stop here? Questions arise, answers await. Life is full of surprises! What do you think?""")
    Is this what you wanted?
    <BLANKLINE>
    Perhaps:
    <BLANKLINE>
    a collection of words.
    <BLANKLINE>
    Here, there, everywhere?
    <BLANKLINE>
    Let’s explore:
    <BLANKLINE>
    ideas, thoughts, wonders.
    <BLANKLINE>
    Can we go deeper?
    <BLANKLINE>
    Maybe! Or should we stop here?
    <BLANKLINE>
    Questions arise, answers await.
    <BLANKLINE>
    Life is full of surprises! What do you think?
    <BLANKLINE>
    
Printing a word with surrounding spaces:

    >>> text_indentation("    Tuwaiq    ")
    Tuwaiq

Word ending with punctuation:

    >>> text_indentation("    Holberton    .")
    Holberton    .
    <BLANKLINE>

All special punctuation characters:

    >>> text_indentation(".?:")
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    :
    <BLANKLINE>

Passing `None` as input (should raise TypeError):

    >>> text_indentation(None)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

Passing an integer (should raise TypeError):

    >>> text_indentation(10)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

Single character (non-special):

    >>> text_indentation('2')
    2

Empty string with only spaces:

    >>> text_indentation('    ')

Single newline character:

    >>> text_indentation('\\n')
    <BLANKLINE>

Newlines and special characters:

    >>> text_indentation('\\n.\\n?\\n:')
    <BLANKLINE>
    .
    <BLANKLINE>
    <BLANKLINE>
    ?
    <BLANKLINE>
    <BLANKLINE>
    :
    <BLANKLINE>

Spaces with one newline:

    >>> text_indentation("   \\n")
    <BLANKLINE>

Spaces and newline (variant 2):

    >>> text_indentation("   \\n   ")
    <BLANKLINE>

Newline followed by spaces:

    >>> text_indentation("\\n   ")
    <BLANKLINE>
